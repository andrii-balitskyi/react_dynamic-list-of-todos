{"version":3,"sources":["components/TodoList/TodoList.jsx","api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","todoFilterInput","filterBy","handleChange","event","target","name","value","setState","this","props","todos","handleUserIdSelection","selectedUserId","filteredTodos","filter","todo","title","includes","completed","className","type","onChange","placeholder","map","key","id","cn","TodoList__item","readOnly","checked","button","userId","onClick","React","Component","request","endpoint","fetch","then","response","json","result","data","getUser","CurrentUser","user","loadUser","prevProps","clearUser","email","phone","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c69c94ad.chunk.js","sourcesContent":["import React from 'react';\nimport cn from 'classnames';\nimport PropTypes from 'prop-types';\n\nimport './TodoList.scss';\n\nexport class TodoList extends React.Component {\n  state = {\n    todoFilterInput: '',\n    filterBy: 'all',\n  }\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  render() {\n    const {\n      todos,\n      handleUserIdSelection,\n      selectedUserId,\n    } = this.props;\n\n    const { todoFilterInput, filterBy } = this.state;\n\n    const filteredTodos = todos\n      .filter(todo => todo.title.includes(todoFilterInput))\n      .filter((todo) => {\n        switch (filterBy) {\n          case 'all':\n            return todo;\n\n          case 'completed':\n            return todo.completed;\n\n          case 'active':\n            return !todo.completed;\n\n          default:\n            return todo;\n        }\n      });\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <input\n          type=\"text\"\n          name=\"todoFilterInput\"\n          value={todoFilterInput}\n          onChange={this.handleChange}\n          placeholder=\"Search by title\"\n        />\n        <select name=\"filterBy\" onChange={this.handleChange}>\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {filteredTodos.map(todo => (\n              <li\n                key={todo.id}\n                className={cn({\n                  TodoList__item: true,\n                  'TodoList__item--checked': todo.completed,\n                  'TodoList__item--unchecked': !todo.completed,\n                })\n                }\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    readOnly\n                    checked={todo.completed}\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  type=\"button\"\n                  className={cn({\n                    button: true,\n                    'TodoList__user-button': true,\n                    'TodoList__user-button--selected':\n                      selectedUserId === todo.userId,\n                  })\n                  }\n                  onClick={() => handleUserIdSelection(todo.userId)}\n                >\n                  User&nbsp;#\n                      {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    )\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      userId: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }),\n  ).isRequired,\n  handleUserIdSelection: PropTypes.func.isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n};\n\n// TodoList.defaultProps = {\n//   userId: 0,\n//   title: 'No title',\n//   completed: false,\n// };\n","const API_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = endpoint => fetch(`${API_URL}${endpoint}`)\n  .then(response => response.json())\n  .then(result => result.data);\n\nexport const getTodos = () => request('/todos');\nexport const getUser = userId => request(`/users/${userId}`);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './CurrentUser.scss';\n\nimport { getUser } from '../../api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: null,\n  }\n\n  componentDidMount() {\n    this.loadUser();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId === this.props.userId) {\n      return;\n    }\n\n    this.loadUser();\n  }\n\n  loadUser = () => {\n    getUser(this.props.userId)\n      .then(user => this.setState({ user }));\n  }\n\n  render() {\n    const { userId, clearUser } = this.props;\n    const { user } = this.state;\n\n    return (\n      user ? (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>{`Selected user: ${userId}`}</span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\">{user.name}</h3>\n          <p className=\"CurrentUser__email\">{user.email}</p>\n          <p className=\"CurrentUser__phone\">{user.phone}</p>\n          <button\n            type=\"button\"\n            onClick={clearUser}\n          >\n            Clear\n          </button>\n        </div>\n      ) : (\n        <p>No such user</p>\n      )\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clearUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { TodoList } from './components/TodoList/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nimport { getTodos } from './api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    getTodos('/todos').then(todos => this.setState({\n      todos: todos.filter(\n        todo => todo.title && todo.userId && todo.completed !== null,\n      ),\n    }));\n  }\n\n  handleUserIdSelection = (selectedUserId) => {\n    this.setState((state) => {\n      if (state.selectedUserId === selectedUserId) {\n        return null;\n      }\n\n      return { selectedUserId };\n    });\n  }\n\n  clearUser = () => {\n    this.setState({ selectedUserId: 0 });\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            handleUserIdSelection={this.handleUserIdSelection}\n            selectedUserId={selectedUserId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearUser={this.clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}